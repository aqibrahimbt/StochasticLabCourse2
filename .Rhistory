setwd("~/Desktop/StochasticsLabCourse")
#specify the packages of interest
options(warn=-1)
options(repr.plot.width=6, repr.plot.height=4)
packages = c("haven", "tidyverse", "plyr", "ggplot2", "dplyr", "maptools", "rgdal")
## Check to see if package is available and load else install the package and its dependencies
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
childrenfinal <- read_dta("data/childrenfinal.dta")
## Remove specific columns with a regex expression
pattern <- "^[s,m,v]\\d"
cols <- grep(pattern, names(childrenfinal), value=T)
childrenfinal <- childrenfinal[ , !(names(childrenfinal) %in% cols)]
## Select data subset
col_subset = c("hypage","ruralfacto", "female", "zstunt", "zweight", "zwast", "adm2")
children_subset <- childrenfinal%>%select(col_subset)
## Changing dtype of columns
children_subset <- within(children_subset,
{gender <- factor(female, labels = c("Male", "Female"))
settlement <- factor(ruralfacto, labels = c("rural", "urban"))})
ggplot(children_subset, aes(x=hypage, y= zstunt)) + geom_smooth() + geom_point() + theme_classic() +
labs(title = "PLot of hypage vs zstunt",caption = "Data from Kenyan Demographic and Health Survey 2003",
tag = "Figure 1.1",x = "hypage",y = "zstunt") + theme_classic()
# Scatter plot of zstunt vs age
ggplot(children_subset) + geom_point(aes(x=hypage, y= zstunt, colour=gender))  +
labs(title = "PLot of zstunt vs age",caption = "Data from Kenyan Demographic and Health Survey 2003",
tag = "Figure 1.2",x = "hypage",y = "zstunt", colour = "Gender") + theme_classic()
# Scatter plot of zstunt vs rural/urban
ggplot(children_subset) + geom_point(aes(x=hypage, y= zstunt, colour=settlement)) + geom_smooth() +
labs(title = "PLot of zstunt vs age for settlement type",caption = "Data from Kenyan Demographic and Health Survey 2003",
tag = "Figure 1.3",x = "hypage",y = "age", colour = "Settlement type") + theme_classic()
# Scatter plot of zstunt vs rural/urban
ggplot(children_subset) + geom_point(aes(x=hypage, y= zstunt, colour=settlement)) +
labs(title = "PLot of zstunt vs age for settlement type",caption = "Data from Kenyan Demographic and Health Survey 2003",
tag = "Figure 1.3",x = "hypage",y = "age", colour = "Settlement type") + theme_classic()
zstunt_data <- data.frame(region= c(children_subset$adm2), zstunt=c(children_subset$zstunt))
agg <- aggregate(zstunt_data, by=list(zstunt_data$region), FUN=mean)
agg$region <- NULL
colnames(agg)[colnames(agg)=="Group.1"] <- "NAME_1"
agg <- agg %>% add_row(NAME_1 = "ISOLO", zstunt = 0)
Kenya<-getData("GADM", country="KE", level=1)
## Set an appropriate projection for the data
Kenya_UTM<-spTransform(Kenya, CRS("+init=EPSG:32737"))
Kenya_UTM@data$id <- rownames(Kenya_UTM@data)
## Add aggregate data to map data
Kenya_UTM@data <- join(Kenya_UTM@data, agg, by="NAME_1")
Kenya_df <- fortify(Kenya_UTM)
Kenya_df <- join(Kenya_df,Kenya_UTM@data, by="id")
Kenya<-getData("GADM", country="KE", level=1)
packages = c("haven", "tidyverse", "plyr", "ggplot2", "dplyr", "maptools", "rgdal", "map")
## Check to see if package is available and load else install the package and its dependencies
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
Kenya<-getData("GADM", country="KE", level=1)
packages = c("haven", "tidyverse", "plyr", "ggplot2", "dplyr", "maptools", "rgdal", "raster")
## Check to see if package is available and load else install the package and its dependencies
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
Kenya<-getData("GADM", country="KE", level=1)
Kenya_UTM<-spTransform(Kenya, CRS("+init=EPSG:32737"))
Kenya_UTM@data$id <- rownames(Kenya_UTM@data)
## Add aggregate data to map data
Kenya_UTM@data <- join(Kenya_UTM@data, agg, by="NAME_1")
Kenya_df <- fortify(Kenya_UTM)
Kenya_df <- join(Kenya_df,Kenya_UTM@data, by="id")
## Generate dataset needed for adding labels to the geo-spatial map
centroids_df <- as.data.frame(coordinates(Kenya_UTM))
names(centroids_df) <- c("long", "lat")
agg<- agg[order(agg$NAME_1),]
centroids_df$NAME_1 <- Kenya_UTM@data$NAME_1
centroids_df$zstunt.mean <- agg$zstunt
## Configure theme options for the map
theme_opts<-list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_blank()))
## Visualize the zstunt data on the Kenyan map
ggplot() + geom_polygon(data = Kenya_df,
aes(x = long, y = lat, group = group, fill =zstunt),
color = "black", size = 0.25) + theme(aspect.ratio=1) +
geom_text (data=centroids_df, aes(x=long, y=lat, label=NAME_1), position = "identity", check_overlap = TRUE)
names(Kenya_df)
## Visualize the zstunt data on the Kenyan map
ggplot() + geom_polygon(data = Kenya_df,
aes(x = long, y = lat, group = group, fill =zstunt),
color = "yellow", size = 0.25) + theme(aspect.ratio=1) +
geom_text (data=centroids_df, aes(x=long, y=lat, label=NAME_1), position = "identity", check_overlap = TRUE)
Kenya_df$zstunt
## Visualize the zstunt data on the Kenyan map
ggplot() + geom_polygon(data = Kenya_df,
aes(x = long, y = lat, group = group, fill =agg),
color = "yellow", size = 0.25) + theme(aspect.ratio=1) +
geom_text (data=centroids_df, aes(x=long, y=lat, label=NAME_1), position = "identity", check_overlap = TRUE)
View(centroids_df)
names(Kenya_df)
View(agg)
Kenya_UTM@data
names(Kenya_UTM@data)
Kenya_UTM@data$zstunt
Kenya_UTM@data$NAME_1
agg$NAME_1
Kenya_UTM@data$id <- rownames(Kenya_UTM@data)
Kenya_UTM@data$NAME_1 <- toupper(Kenya_UTM@data$NAME_1)
## Add aggregate data to map data
Kenya_UTM@data <- join(Kenya_UTM@data, agg, by="NAME_1")
Kenya_df <- fortify(Kenya_UTM)
Kenya_df <- join(Kenya_df,Kenya_UTM@data, by="id")
## Generate dataset needed for adding labels to the geo-spatial map
centroids_df <- as.data.frame(coordinates(Kenya_UTM))
names(centroids_df) <- c("long", "lat")
agg<- agg[order(agg$NAME_1),]
centroids_df$NAME_1 <- Kenya_UTM@data$NAME_1
centroids_df$zstunt.mean <- agg$zstunt
## Configure theme options for the map
theme_opts<-list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_blank()))
## Visualize the zstunt data on the Kenyan map
ggplot() + geom_polygon(data = Kenya_df,
aes(x = long, y = lat, group = group, fill =agg),
color = "yellow", size = 0.25) + theme(aspect.ratio=1) +
geom_text (data=centroids_df, aes(x=long, y=lat, label=NAME_1), position = "identity", check_overlap = TRUE)
## Visualize the zstunt data on the Kenyan map
ggplot() + geom_polygon(data = Kenya_df,
aes(x = long, y = lat, group = group, fill =zstunt),
color = "yellow", size = 0.25) + theme(aspect.ratio=1) +
geom_text (data=centroids_df, aes(x=long, y=lat, label=NAME_1), position = "identity", check_overlap = TRUE)
Kenya_UTM@data$zstunt
## data processing
##Read in data
childrenfinal <- read_dta("data/childrenfinal.dta")
## Remove specific columns with a regex expression
pattern <- "^[s,m,v]\\d"
cols <- grep(pattern, names(childrenfinal), value=T)
childrenfinal <- childrenfinal[ , !(names(childrenfinal) %in% cols)]
## Select data subset
col_subset = c("hypage","ruralfacto", "female", "zstunt", "zweight", "zwast", "adm2")
children_subset <- childrenfinal%>%select(col_subset)
## Changing dtype of columns
children_subset <- within(children_subset,
{gender <- factor(female, labels = c("Male", "Female"))
settlement <- factor(ruralfacto, labels = c("rural", "urban"))})
zstunt_data <- data.frame(region= c(children_subset$adm2), zstunt=c(children_subset$zstunt))
agg <- aggregate(zstunt_data, by=list(zstunt_data$region), FUN=mean)
agg$region <- NULL
colnames(agg)[colnames(agg)=="Group.1"] <- "NAME_1"
agg <- agg %>% add_row(NAME_1 = "ISOLO", zstunt = 0)
agg
Kenya_UTM@data$id <- rownames(Kenya_UTM@data)
Kenya_UTM@data$NAME_1 <- toupper(Kenya_UTM@data$NAME_1)
## Add aggregate data to map data
Kenya_UTM@data <- join(Kenya_UTM@data, agg, by="NAME_1")
Kenya_df <- fortify(Kenya_UTM)
Kenya_df <- join(Kenya_df,Kenya_UTM@data, by="id")
Kenya_df$zstunt
View(agg)
childrenfinal <- read_dta("data/childrenfinal.dta")
children1<- children %>%
dplyr::select(-matches("^[svm][0-9]"))
children <- read_dta("data/childrenfinal.dta")
#remove all variables that start with “s“, “v” and “m”, followed by a number
children1<- children %>%
dplyr::select(-matches("^[svm][0-9]"))
#convert labelled double into double variables
children2<- children1 %>%
mutate_if(is.double, as.double)
children3<- children2 %>%
dplyr::select(c(hypage, ruralfacto, female, zstunt, zweight, zwast, adm2))
ggplot(children3, aes(x = hypage, y = zstunt)) +
geom_point() +
geom_smooth(se = F, color = "purple")
ggplot(children3, aes(x = hypage, y = zstunt,  colour = factor(female))) +
geom_point(alpha = 0.4) +
geom_smooth(se = F) +
scale_colour_manual(labels = c("male", "female"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Gender"))
#plot zstunt against age for urban and rural children
ggplot(children3, aes(x = hypage, y = zstunt,  colour = factor(ruralfacto))) +
geom_point(alpha = 0.4) +
geom_smooth(se = F) +
scale_colour_manual(labels = c("urban", "rural"), values = c("red2", "yellow")) +
guides(colour = guide_legend(title="Area"))
Kenya1<-getData("GADM", country="KE", level=1) #Download Kenya shapefile data
Kenya1_UTM<-spTransform(Kenya1, CRS("+init=epsg:32537"))
colnames(children3)[7] <- "NAME_1"
children3<- children3[order(children3$NAME_1),]
Kenya1_UTM@data<- Kenya1_UTM@data[order(Kenya1_UTM@data$NAME_1),]
#summarising children3 data by the mean of zstunt in the corresponding county
children4 <- children3 %>%
group_by(NAME_1) %>%
summarise(mean = mean(zstunt), n = n())
Kenya1<-getData("GADM", country="KE", level=1) #Download Kenya shapefile data
Kenya1_UTM<-spTransform(Kenya1, CRS("+init=epsg:32537"))
colnames(children3)[7] <- "NAME_1"
children3<- children3[order(children3$NAME_1),]
Kenya1_UTM@data<- Kenya1_UTM@data[order(Kenya1_UTM@data$NAME_1),]
children4 <- children3 %>%
group_by(NAME_1) %>%
summarise(mean = mean(zstunt), n = n())
children4 <- children3 %>%
group_by(NAME_1) %>%
summarise(mean = mean(zstunt))
View(children4)
children4 <- children3 %>%
group_by(NAME_1) %>%
summarise(mean = mean(zstunt), n = n())
children4 <- children3 %>%
dplyr::group_by(NAME_1) %>%
dplyr::summarise(mean = mean(zstunt), n = n())
#Adding the missing county Isiolo
children4[nrow(children4) + 1,] <- NA
children4$NAME_1[47] <- "Isiolo"
#reordering
children4<- children4[order(children4$NAME_1),]
#Prepare the dataframe for ggplot
Kenya1_UTM@data$id <- rownames(Kenya1_UTM@data)
Kenya1_UTM@data <- mutate(Kenya1_UTM@data, zstunt.mean= children4$mean)
Kenya1_df <- fortify(Kenya1_UTM)
Kenya1_df <- full_join(Kenya1_df,Kenya1_UTM@data, by="id")
#In order to add names to map, we need another dataframe with all the conunties' centroids
# "coordinates" extracts centroids of the polygons, in the order listed at Kenya1_UTM@data
centroids_df <- as.data.frame(coordinates(Kenya1_UTM))
names(centroids_df) <- c("long", "lat")
children4<- children4[order(children4$NAME_1),]
centroids_df$NAME_1 <- Kenya1_UTM@data$NAME_1
centroids_df$zstunt.mean <- children4$mean
#Generating the map
ggplot(data = Kenya1_df, aes(x = long, y = lat, group = group, fill = zstunt.mean)) +
geom_polygon(color = "black", size = 0.25) +
geom_text(data = centroids_df, aes(x = long, y = lat, label = NAME_1, group = NULL), size = 3) +
scale_fill_distiller(name="Zstunt mean for \n each county", palette = "Spectral") +
theme(aspect.ratio = 1)
#Generating the map
ggplot(data = Kenya1_df, aes(x = long, y = lat, group = group, fill = zstunt.mean)) +
geom_polygon(color = "black", size = 0.25) +
geom_text(data = centroids_df, aes(x = long, y = lat, label = NAME_1, group = NULL), size = 3) +
scale_fill_distiller(name="Mean zstunt by county", palette = "Set1") +
theme(aspect.ratio = 1)
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
ggplot(data = Kenya1_df, aes(x = long, y = lat, group = group, fill = zstunt.mean)) +
geom_polygon(color = "black", size = 0.25) +
geom_text(data = centroids_df, aes(x = long, y = lat, label = NAME_1, group = NULL), size = 3, position=position_jitter(width=1,height=1)) +
scale_fill_distiller(name="Mean zstunt by county", palette = "Set1") +
theme(aspect.ratio = 1)
ggplot(data = Kenya1_df, aes(x = long, y = lat, group = group, fill = zstunt.mean)) +
geom_polygon(color = "black", size = 0.25) +
geom_text(data = centroids_df, aes(x = long, y = lat, label = NAME_1, group = NULL), size = 3, position=position_jitter(width=1,height=1)) +
scale_fill_distiller(name="Mean zstunt by county", palette = "Set1") +
theme(aspect.ratio = 1) + theme_classic()
options(repr.plot.width=10, repr.plot.height=8)
ggplot(data = Kenya1_df, aes(x = long, y = lat, group = group, fill = zstunt.mean)) +
geom_polygon(color = "black", size = 0.25) +
geom_text(data = centroids_df, aes(x = long, y = lat, label = NAME_1, group = NULL), size = 3, position=position_jitter(width=1,height=1)) +
scale_fill_distiller(name="Mean zstunt by county", palette = "Set1") +
theme(aspect.ratio = 1) + theme_classic()
